The provided Wazuh rules are extremely generic.  They lack any specific conditions, making them prone to false positives.  The alert "SSH brute force detected from IP 192.168.1.10" indicates a need for more context within the rules.  We need to know what events 0, 1, and 2 represent in order to optimize them properly.  However, assuming these events relate to login attempts (successful or failed), we can make some improvements.

**Optimized Wazuh Rules:**

```xml
<!-- Optimized Rule 5710:  Detects failed SSH login attempts from the same IP address within a short time frame -->
<rule id='5710' level='7'>
  <description>SSH Brute Force Attempt - Multiple Failed Logins from Single IP</description>
  <if_sid>5710</if_sid>  <!-- Assuming sid 5710 corresponds to failed login attempts -->
  <condition>(decoded_log_message contains "Failed password" or decoded_log_message contains "Authentication failure") and count (log_data.ip) >=3 within 60 seconds</condition>
  <group>ssh</group>
  <level>7</level>  <!--Reduced severity based on context -->
</rule>

<!-- Optimized Rule 5711: Detects SSH login from a known malicious IP address -->
<rule id='5711' level='10'>
  <description>SSH Login from Known Malicious IP</description>
  <if_sid>5711</if_sid> <!-- Assuming sid 5711 corresponds to successful/failed login -->
  <condition>log_data.ip in ( '192.168.1.10')</condition> <!--This is a sample; a real rule would use a much more comprehensive list from a threat intelligence source -->
  <group>ssh</group>
</rule>

<!-- Optimized Rule 5712: Detects unusual SSH login location (geoip based)  -->
<rule id='5712' level='7'>
    <description>Suspicious SSH Login Location</description>
    <if_sid>5712</if_sid> <!-- Assuming sid 5712 corresponds to successful/failed login -->
    <condition>geoip.country_name != "US" and (decoded_log_message contains "Accepted password" or decoded_log_message contains "Login successful")</condition> <!--Adjust US to your expected location -->
    <group>ssh</group>
</rule>
```


**Explanation of Changes:**

* **Specificity:** The original rules were overly broad. The optimized rules include specific conditions based on log message content (e.g., "Failed password," "Authentication failure") and IP addresses.  They focus on detecting suspicious activity rather than any SSH event.

* **Reduced Severity:** The original rules had a level of 10 (critical).  This is too high for generic SSH events.  The revised rules reflect more appropriate severity levels based on the threat they detect (Level 7 for suspicious but possibly benign events and 10 only for critical threats).

* **Brute Force Detection:** Rule 5710 now specifically targets brute-force attempts by counting failed login attempts from the same IP within a short timeframe (60 seconds). This is much more effective than simply logging any SSH event.

* **Malicious IP Detection:** Rule 5711 now incorporates a list of known malicious IP addresses.  **This requires maintaining an updated list from a reliable threat intelligence source.** The example uses '192.168.1.10' as an illustration;  this should be replaced with a proper list and might be managed by a separate Wazuh component.

* **Geolocation:** Rule 5712 adds geolocation checks to identify login attempts originating from unexpected locations. This requires the Wazuh agent to have GeoIP enabled. The rule is set to raise an alert if the login originates from a country other than what is considered normal (this part should be adjusted to your specific needs).

* **`decoded_log_message`:** This assumes your logs are encoded; if they aren't, replace this with the actual field containing the login status. The `log_data.ip` is also an example; adjust if your Wazuh data field varies.

**Important Considerations:**

* **`if_sid`:**  The `if_sid` tags are crucial for connecting these rules to the actual syslog or audit messages generated by your SSH server. You need to replace the placeholder `if_sid` values (5710, 5711, 5712) with the correct Security Information and Event Management (SIEM) IDs that correspond to the specific SSH events your system generates.

* **Threat Intelligence:** Rule 5711's effectiveness depends heavily on having an up-to-date list of malicious IP addresses.  This requires integrating with a threat intelligence feed.

* **Tuning:** These rules will likely require further tuning and adjustment based on your specific environment and the types of SSH events logged by your system.  Monitor the alerts generated to assess their accuracy and refine the conditions as needed.


This improved version provides a more effective and less noisy way to monitor SSH activity. Remember to adapt the rules and conditions to match your specific infrastructure and logging configuration.
